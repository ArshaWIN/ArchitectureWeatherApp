// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.di.activity;

import android.app.Application;
import android.content.Context;
import com.github.terrakok.cicerone.NavigatorHolder;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import ilya.mihailenko.myapplication.common.activityprovider.ActivityProvider;
import ilya.mihailenko.myapplication.common.gps.GpsConnectionManager;
import ilya.mihailenko.myapplication.common.location.CurrentLocationTracker;
import ilya.mihailenko.myapplication.common.location.LocationTracker;
import ilya.mihailenko.myapplication.common.navigation.AppRouter;
import ilya.mihailenko.myapplication.di.app.AppComponent;
import ilya.mihailenko.myapplication.model.data.network.WeatherApi;
import ilya.mihailenko.myapplication.presentation.base.AppActivity;
import ilya.mihailenko.myapplication.presentation.base.AppActivity_MembersInjector;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerActivityComponent implements ActivityComponent {
  private final AppComponent appComponent;

  private final DaggerActivityComponent activityComponent = this;

  private Provider<ActivityProvider> getActivityProvider;

  private Provider<LocationTracker> provideLocationTrackerProvider;

  private Provider<CurrentLocationTracker> provideCurrentLocationTrackerProvider;

  private Provider<Context> getContextProvider;

  private Provider<GpsConnectionManager> provideGpsConnectionManagerProvider;

  private DaggerActivityComponent(CommonActivityModule commonActivityModuleParam,
      AppComponent appComponentParam) {
    this.appComponent = appComponentParam;
    initialize(commonActivityModuleParam, appComponentParam);

  }

  public static ActivityComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final CommonActivityModule commonActivityModuleParam,
      final AppComponent appComponentParam) {
    this.getActivityProvider = new ilya_mihailenko_myapplication_di_app_AppComponent_getActivityProvider(appComponentParam);
    this.provideLocationTrackerProvider = DoubleCheck.provider(CommonActivityModule_ProvideLocationTrackerFactory.create(commonActivityModuleParam, getActivityProvider));
    this.provideCurrentLocationTrackerProvider = DoubleCheck.provider(CommonActivityModule_ProvideCurrentLocationTrackerFactory.create(commonActivityModuleParam, getActivityProvider));
    this.getContextProvider = new ilya_mihailenko_myapplication_di_app_AppComponent_getContext(appComponentParam);
    this.provideGpsConnectionManagerProvider = DoubleCheck.provider(CommonActivityModule_ProvideGpsConnectionManagerFactory.create(commonActivityModuleParam, getContextProvider));
  }

  @Override
  public void inject(AppActivity appActivity) {
    injectAppActivity(appActivity);
  }

  @Override
  public Application getApplication() {
    return Preconditions.checkNotNullFromComponent(appComponent.getApplication());
  }

  @Override
  public Context getContext() {
    return Preconditions.checkNotNullFromComponent(appComponent.getContext());
  }

  @Override
  public ActivityProvider getActivityProvider() {
    return Preconditions.checkNotNullFromComponent(appComponent.getActivityProvider());
  }

  @Override
  public WeatherApi provideWeatherApi() {
    return Preconditions.checkNotNullFromComponent(appComponent.provideWeatherApi());
  }

  @Override
  public AppRouter getExtendedRouter() {
    return Preconditions.checkNotNullFromComponent(appComponent.provideAppRouter());
  }

  @Override
  public NavigatorHolder getNavigationHolder() {
    return Preconditions.checkNotNullFromComponent(appComponent.provideNavigationHolder());
  }

  @Override
  public LocationTracker provideLocationTracker() {
    return provideLocationTrackerProvider.get();
  }

  @Override
  public CurrentLocationTracker provideCurrentLocationTracker() {
    return provideCurrentLocationTrackerProvider.get();
  }

  @Override
  public GpsConnectionManager provideGpsConnectionManager() {
    return provideGpsConnectionManagerProvider.get();
  }

  private AppActivity injectAppActivity(AppActivity instance) {
    AppActivity_MembersInjector.injectNavigatorHolder(instance, Preconditions.checkNotNullFromComponent(appComponent.provideNavigationHolder()));
    AppActivity_MembersInjector.injectRouter(instance, Preconditions.checkNotNullFromComponent(appComponent.provideAppRouter()));
    return instance;
  }

  private static final class Builder implements ActivityComponent.Builder {
    private AppComponent appComponent;

    @Override
    public Builder appComponent(AppComponent component) {
      this.appComponent = Preconditions.checkNotNull(component);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Override
    @Deprecated
    public Builder appModule(ActivityModule activityModule) {
      Preconditions.checkNotNull(activityModule);
      return this;
    }

    @Override
    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerActivityComponent(new CommonActivityModule(), appComponent);
    }
  }

  private static final class ilya_mihailenko_myapplication_di_app_AppComponent_getActivityProvider implements Provider<ActivityProvider> {
    private final AppComponent appComponent;

    ilya_mihailenko_myapplication_di_app_AppComponent_getActivityProvider(
        AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityProvider get() {
      return Preconditions.checkNotNullFromComponent(appComponent.getActivityProvider());
    }
  }

  private static final class ilya_mihailenko_myapplication_di_app_AppComponent_getContext implements Provider<Context> {
    private final AppComponent appComponent;

    ilya_mihailenko_myapplication_di_app_AppComponent_getContext(AppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNullFromComponent(appComponent.getContext());
    }
  }
}
