// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.di.features.weather;

import android.content.Context;
import android.location.Geocoder;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import ilya.mihailenko.myapplication.common.gps.GpsConnectionManager;
import ilya.mihailenko.myapplication.common.location.CurrentLocationTracker;
import ilya.mihailenko.myapplication.di.activity.ActivityComponent;
import ilya.mihailenko.myapplication.model.data.network.WeatherApi;
import ilya.mihailenko.myapplication.model.facade.currentweather.CurrentWeatherFacade;
import ilya.mihailenko.myapplication.model.facade.currentweather.CurrentWeatherFacadeImpl;
import ilya.mihailenko.myapplication.model.facade.currentweather.CurrentWeatherFacadeImpl_Factory;
import ilya.mihailenko.myapplication.model.interactor.weather.WeatherInteractor;
import ilya.mihailenko.myapplication.model.interactor.weather.WeatherInteractorImpl;
import ilya.mihailenko.myapplication.model.interactor.weather.WeatherInteractorImpl_Factory;
import ilya.mihailenko.myapplication.model.repository.weather.WeatherRepository;
import ilya.mihailenko.myapplication.model.repository.weather.WeatherRepositoryImpl;
import ilya.mihailenko.myapplication.model.repository.weather.WeatherRepositoryImpl_Factory;
import ilya.mihailenko.myapplication.presentation.weather.WeatherFragment;
import ilya.mihailenko.myapplication.presentation.weather.WeatherFragment_MembersInjector;
import ilya.mihailenko.myapplication.presentation.weather.WeatherViewModel;
import ilya.mihailenko.myapplication.presentation.weather.WeatherViewModel_Factory;
import ilya.mihailenko.myapplication.presentation.weather.WeatherViewModel_Factory_Impl;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerWeatherComponent implements WeatherComponent {
  private final DaggerWeatherComponent weatherComponent = this;

  private Provider<CurrentLocationTracker> provideCurrentLocationTrackerProvider;

  private Provider<GpsConnectionManager> provideGpsConnectionManagerProvider;

  private Provider<WeatherApi> provideWeatherApiProvider;

  private Provider<WeatherRepositoryImpl> weatherRepositoryImplProvider;

  private Provider<WeatherRepository> provideWeatherRepositoryProvider;

  private Provider<Context> getContextProvider;

  private Provider<Geocoder> provideGeocoderProvider;

  private Provider<WeatherInteractorImpl> weatherInteractorImplProvider;

  private Provider<WeatherInteractor> provideWeatherInteractorProvider;

  private Provider<CurrentWeatherFacadeImpl> currentWeatherFacadeImplProvider;

  private Provider<CurrentWeatherFacade> provideCurrentWeatherFacadeProvider;

  private WeatherViewModel_Factory weatherViewModelProvider;

  private Provider<WeatherViewModel.Factory> factoryProvider;

  private DaggerWeatherComponent(ActivityComponent activityComponentParam) {

    initialize(activityComponentParam);

  }

  public static WeatherComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ActivityComponent activityComponentParam) {
    this.provideCurrentLocationTrackerProvider = new ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideCurrentLocationTracker(activityComponentParam);
    this.provideGpsConnectionManagerProvider = new ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideGpsConnectionManager(activityComponentParam);
    this.provideWeatherApiProvider = new ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideWeatherApi(activityComponentParam);
    this.weatherRepositoryImplProvider = WeatherRepositoryImpl_Factory.create(provideWeatherApiProvider);
    this.provideWeatherRepositoryProvider = DoubleCheck.provider((Provider) weatherRepositoryImplProvider);
    this.getContextProvider = new ilya_mihailenko_myapplication_di_activity_ActivityComponent_getContext(activityComponentParam);
    this.provideGeocoderProvider = DoubleCheck.provider(WeatherModule_ProvideGeocoderFactory.create(getContextProvider));
    this.weatherInteractorImplProvider = WeatherInteractorImpl_Factory.create(provideWeatherRepositoryProvider, provideGeocoderProvider);
    this.provideWeatherInteractorProvider = DoubleCheck.provider((Provider) weatherInteractorImplProvider);
    this.currentWeatherFacadeImplProvider = CurrentWeatherFacadeImpl_Factory.create(provideCurrentLocationTrackerProvider, provideGpsConnectionManagerProvider, provideWeatherInteractorProvider);
    this.provideCurrentWeatherFacadeProvider = DoubleCheck.provider((Provider) currentWeatherFacadeImplProvider);
    this.weatherViewModelProvider = WeatherViewModel_Factory.create(provideCurrentWeatherFacadeProvider);
    this.factoryProvider = WeatherViewModel_Factory_Impl.create(weatherViewModelProvider);
  }

  @Override
  public void inject(WeatherFragment weatherFragment) {
    injectWeatherFragment(weatherFragment);
  }

  private WeatherFragment injectWeatherFragment(WeatherFragment instance) {
    WeatherFragment_MembersInjector.injectWeatherViewModelFactory(instance, factoryProvider.get());
    return instance;
  }

  private static final class Builder implements WeatherComponent.Builder {
    private ActivityComponent activityComponent;

    @Override
    public Builder activityComponent(ActivityComponent component) {
      this.activityComponent = Preconditions.checkNotNull(component);
      return this;
    }

    @Override
    public WeatherComponent build() {
      Preconditions.checkBuilderRequirement(activityComponent, ActivityComponent.class);
      return new DaggerWeatherComponent(activityComponent);
    }
  }

  private static final class ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideCurrentLocationTracker implements Provider<CurrentLocationTracker> {
    private final ActivityComponent activityComponent;

    ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideCurrentLocationTracker(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public CurrentLocationTracker get() {
      return Preconditions.checkNotNullFromComponent(activityComponent.provideCurrentLocationTracker());
    }
  }

  private static final class ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideGpsConnectionManager implements Provider<GpsConnectionManager> {
    private final ActivityComponent activityComponent;

    ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideGpsConnectionManager(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public GpsConnectionManager get() {
      return Preconditions.checkNotNullFromComponent(activityComponent.provideGpsConnectionManager());
    }
  }

  private static final class ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideWeatherApi implements Provider<WeatherApi> {
    private final ActivityComponent activityComponent;

    ilya_mihailenko_myapplication_di_activity_ActivityComponent_provideWeatherApi(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public WeatherApi get() {
      return Preconditions.checkNotNullFromComponent(activityComponent.provideWeatherApi());
    }
  }

  private static final class ilya_mihailenko_myapplication_di_activity_ActivityComponent_getContext implements Provider<Context> {
    private final ActivityComponent activityComponent;

    ilya_mihailenko_myapplication_di_activity_ActivityComponent_getContext(
        ActivityComponent activityComponent) {
      this.activityComponent = activityComponent;
    }

    @Override
    public Context get() {
      return Preconditions.checkNotNullFromComponent(activityComponent.getContext());
    }
  }
}
