// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.di.activity;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import ilya.mihailenko.myapplication.common.activityprovider.ActivityProvider;
import ilya.mihailenko.myapplication.common.location.LocationTracker;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CommonActivityModule_ProvideLocationTrackerFactory implements Factory<LocationTracker> {
  private final CommonActivityModule module;

  private final Provider<ActivityProvider> activityProvider;

  public CommonActivityModule_ProvideLocationTrackerFactory(CommonActivityModule module,
      Provider<ActivityProvider> activityProvider) {
    this.module = module;
    this.activityProvider = activityProvider;
  }

  @Override
  public LocationTracker get() {
    return provideLocationTracker(module, activityProvider.get());
  }

  public static CommonActivityModule_ProvideLocationTrackerFactory create(
      CommonActivityModule module, Provider<ActivityProvider> activityProvider) {
    return new CommonActivityModule_ProvideLocationTrackerFactory(module, activityProvider);
  }

  public static LocationTracker provideLocationTracker(CommonActivityModule instance,
      ActivityProvider activityProvider) {
    return Preconditions.checkNotNullFromProvides(instance.provideLocationTracker(activityProvider));
  }
}
