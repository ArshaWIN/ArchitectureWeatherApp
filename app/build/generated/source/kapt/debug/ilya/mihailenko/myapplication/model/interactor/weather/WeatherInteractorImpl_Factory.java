// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.model.interactor.weather;

import android.location.Geocoder;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import ilya.mihailenko.myapplication.model.repository.weather.WeatherRepository;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherInteractorImpl_Factory implements Factory<WeatherInteractorImpl> {
  private final Provider<WeatherRepository> weatherRepositoryProvider;

  private final Provider<Geocoder> geocoderProvider;

  public WeatherInteractorImpl_Factory(Provider<WeatherRepository> weatherRepositoryProvider,
      Provider<Geocoder> geocoderProvider) {
    this.weatherRepositoryProvider = weatherRepositoryProvider;
    this.geocoderProvider = geocoderProvider;
  }

  @Override
  public WeatherInteractorImpl get() {
    return newInstance(weatherRepositoryProvider.get(), geocoderProvider.get());
  }

  public static WeatherInteractorImpl_Factory create(
      Provider<WeatherRepository> weatherRepositoryProvider, Provider<Geocoder> geocoderProvider) {
    return new WeatherInteractorImpl_Factory(weatherRepositoryProvider, geocoderProvider);
  }

  public static WeatherInteractorImpl newInstance(WeatherRepository weatherRepository,
      Geocoder geocoder) {
    return new WeatherInteractorImpl(weatherRepository, geocoder);
  }
}
