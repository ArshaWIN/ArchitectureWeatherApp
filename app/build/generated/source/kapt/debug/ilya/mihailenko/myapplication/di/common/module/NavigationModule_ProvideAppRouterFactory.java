// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.di.common.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import ilya.mihailenko.myapplication.common.navigation.AppRouter;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NavigationModule_ProvideAppRouterFactory implements Factory<AppRouter> {
  private final NavigationModule module;

  public NavigationModule_ProvideAppRouterFactory(NavigationModule module) {
    this.module = module;
  }

  @Override
  public AppRouter get() {
    return provideAppRouter(module);
  }

  public static NavigationModule_ProvideAppRouterFactory create(NavigationModule module) {
    return new NavigationModule_ProvideAppRouterFactory(module);
  }

  public static AppRouter provideAppRouter(NavigationModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.provideAppRouter());
  }
}
