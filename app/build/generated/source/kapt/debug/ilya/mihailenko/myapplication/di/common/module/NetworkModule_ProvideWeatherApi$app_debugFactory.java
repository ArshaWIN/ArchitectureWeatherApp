// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.di.common.module;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import ilya.mihailenko.myapplication.model.data.network.WeatherApi;
import ilya.mihailenko.myapplication.model.data.network.interceptor.AppInfoInterceptor;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideWeatherApi$app_debugFactory implements Factory<WeatherApi> {
  private final NetworkModule module;

  private final Provider<Retrofit.Builder> retrofitBuilderProvider;

  private final Provider<OkHttpClient.Builder> okHttpClientBuilderProvider;

  private final Provider<AppInfoInterceptor> appInfoInterceptorProvider;

  public NetworkModule_ProvideWeatherApi$app_debugFactory(NetworkModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider,
      Provider<OkHttpClient.Builder> okHttpClientBuilderProvider,
      Provider<AppInfoInterceptor> appInfoInterceptorProvider) {
    this.module = module;
    this.retrofitBuilderProvider = retrofitBuilderProvider;
    this.okHttpClientBuilderProvider = okHttpClientBuilderProvider;
    this.appInfoInterceptorProvider = appInfoInterceptorProvider;
  }

  @Override
  public WeatherApi get() {
    return provideWeatherApi$app_debug(module, retrofitBuilderProvider.get(), okHttpClientBuilderProvider.get(), appInfoInterceptorProvider.get());
  }

  public static NetworkModule_ProvideWeatherApi$app_debugFactory create(NetworkModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider,
      Provider<OkHttpClient.Builder> okHttpClientBuilderProvider,
      Provider<AppInfoInterceptor> appInfoInterceptorProvider) {
    return new NetworkModule_ProvideWeatherApi$app_debugFactory(module, retrofitBuilderProvider, okHttpClientBuilderProvider, appInfoInterceptorProvider);
  }

  public static WeatherApi provideWeatherApi$app_debug(NetworkModule instance,
      Retrofit.Builder retrofitBuilder, OkHttpClient.Builder okHttpClientBuilder,
      AppInfoInterceptor appInfoInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideWeatherApi$app_debug(retrofitBuilder, okHttpClientBuilder, appInfoInterceptor));
  }
}
