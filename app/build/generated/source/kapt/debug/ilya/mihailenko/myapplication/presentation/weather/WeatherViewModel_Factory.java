// Generated by Dagger (https://dagger.dev).
package ilya.mihailenko.myapplication.presentation.weather;

import dagger.internal.DaggerGenerated;
import ilya.mihailenko.myapplication.common.permission.RxPermissionsWrapper;
import ilya.mihailenko.myapplication.model.facade.currentweather.CurrentWeatherFacade;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherViewModel_Factory {
  private final Provider<CurrentWeatherFacade> currentWeatherFacadeProvider;

  public WeatherViewModel_Factory(Provider<CurrentWeatherFacade> currentWeatherFacadeProvider) {
    this.currentWeatherFacadeProvider = currentWeatherFacadeProvider;
  }

  public WeatherViewModel get(RxPermissionsWrapper rxPermissionsWrapper) {
    return newInstance(rxPermissionsWrapper, currentWeatherFacadeProvider.get());
  }

  public static WeatherViewModel_Factory create(
      Provider<CurrentWeatherFacade> currentWeatherFacadeProvider) {
    return new WeatherViewModel_Factory(currentWeatherFacadeProvider);
  }

  public static WeatherViewModel newInstance(RxPermissionsWrapper rxPermissionsWrapper,
      CurrentWeatherFacade currentWeatherFacade) {
    return new WeatherViewModel(rxPermissionsWrapper, currentWeatherFacade);
  }
}
